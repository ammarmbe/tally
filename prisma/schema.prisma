generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid())
  name                      String?
  email                     String    @unique
  emailVerified             DateTime?
  image                     String?
  attendanceAsPercentage    Boolean   @default(true)
  upcomingClassNotification Int       @default(0) // 0, 15, 30, 45, 60, 120
  lowAttendanceNotification Int       @default(0) // 0, 50, 55, 60, 65, 70, 75, 80
  accounts                  Account[]
  sessions                  Session[]

  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  notificationSubscriptions NotificationSubscription[]
  courses                   Course[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model NotificationSubscription {
  id        String   @id
  userId    String
  endpoint  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Course {
  id           String    @id
  name         String
  abbreviation String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  userId       String

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseTimes       CourseTime[]
  courseAttendances CourseAttendance[]
}

model CourseTime {
  id        String   @id
  courseId  String
  dayOfWeek Int
  startTime String?
  endTime   String?
  room      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(references: [id], fields: [courseId], onDelete: Cascade)
}

model CourseAttendance {
  id        String   @id
  courseId  String
  attended  Boolean
  startTime String?
  endTime   String?
  room      String?
  date      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, date])
}
